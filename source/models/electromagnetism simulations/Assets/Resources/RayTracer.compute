#pragma kernel CSMain

struct shapeInfo{
    float3 position;
    float3 scale;
    int shapeType;
    int material;
};

struct Ray{
    float3 origin;
    float3 direction;
    float3 color;
    float strength;
    float dist;

    // float3 posOnRay(float t){
    //     return origin + t * direction;
    // }
};

struct RayTracingMaterial
{
    float3 colour;
    float emissionStrength;
    float roughness;
    int dielectric;
};

struct Hit{
    float3 pos;
    float3 normal;
    float dist;
    bool hit;
    RayTracingMaterial material;
};

Texture2D<float4> Source;
Texture2D<float4> skyboxTexture;
RWTexture2D<float4> Destination;
StructuredBuffer<shapeInfo> shapes;
StructuredBuffer<RayTracingMaterial> materials;

float4x4 _CameraInverseProjection, _CameraToWorld;
float3 camPos, lightPos;
float3 lightCol;
float lightRadius;
float minBrightness, Maxbrightness;
float shadowBrightnessMul, brightness;
float globalTime;
float skyboxStrength,skyboxGamma,HDRIWidth,HDRIHeight;
int cameraWidth, cameraHeight;
int numShapes;
int spp, maxRecursionDepth;
int shadowResolution;


float EPSILON = 0.0000001f;
float PI = 3.1415926535f;

float4x4 identity = {
    1,0,0,0,
    0,1,0,0,
    0,0,1,0,
    0,0,0,1
};


// groundwork for matrices layed out by ray tracer challenge: a test-driven guide to your first 3d renderer

float4 Point(float3 pos){
    return float4(pos,1);
}

float4 Vector(float3 dir){
    return float4(dir,0);
}
    
// TODO: optimise use of smaller matrices, use functions that return point instead of matrix.

float4x4 translation(float3 translation){
    float4x4 translate = {
        1,0,0,translation.x,
        0,1,0,translation.y,
        0,0,1,translation.z,
        0,0,0,0
    };
    return translate;
}

float4x4 scale(float3 scale){
    float4x4 scaling = {
        scale.x,0,0,0,
        0,scale.y,0,0,
        0,0,scale.z,0,
        0,0,0,0
    };
    // float4x3 scaling = {
    //     scale.x,0,0,0,
    //     0,scale.y,0,0,
    //     0,0,scale.z,0
    // };
    return scaling;
}

float4x4 rotX(float rot){
    float s,c;
    sincos(rot,s,c);
    float4x4 rotation = {
        1,0,0,0,
        0,c,-s,0,
        0,s,c,0,
        0,0,0,1
    };
    return rotation;
}

float4x4 rotY(float rot){
    float s,c;
    sincos(rot,s,c);
    float4x4 rotation = {
        c,0,s,0,
        0,1,0,0,
        -s,0,c,0,
        0,0,0,1
    };
    return rotation;
}

float4x4 rotZ(float rot){
    float s,c;
    sincos(rot,s,c);
    float4x4 rotation = {
        c,-s,0,0,
        s,c,0,0,
        0,0,1,0,
        0,0,0,1
    };
    return rotation;
}

// because reasons???
float4x4 skew(float xiny,float xinz,float yinx,float yinz,float zinx,float ziny){
    float4x4 skewing = {
        1,xiny,xinz,0,
        yinx,1,yinz,0,
        zinx,ziny,1,0,
        0,0,0,1
    };
    return skewing;
}

// from https://gist.github.com/keijiro/ee439d5e7388f3aafc5296005c8c3f33
float3x3 AngleAxis3x3(float angle, float3 axis){
    float s,c;
    sincos(angle, s, c);

    float t = 1 - c;
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;

    return float3x3(
        t * x * x + c,      t * x * y - s * z,  t * x * z + s * y,
        t * x * y + s * z,  t * y * y + c,      t * y * z - s * x,
        t * x * z - s * y,  t * y * z + s * x,  t * z * z + c
    );
}

// from https://gist.github.com/mattatz/86fff4b32d198d0928d0fa4ff32cf6fa
float4x4 inverse(float4x4 m) {
    float n11 = m[0][0], n12 = m[1][0], n13 = m[2][0], n14 = m[3][0];
    float n21 = m[0][1], n22 = m[1][1], n23 = m[2][1], n24 = m[3][1];
    float n31 = m[0][2], n32 = m[1][2], n33 = m[2][2], n34 = m[3][2];
    float n41 = m[0][3], n42 = m[1][3], n43 = m[2][3], n44 = m[3][3];

    float t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
    float t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
    float t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
    float t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

    float det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
    float idet = 1.0f / det;

    float4x4 ret;

    ret[0][0] = t11 * idet;
    ret[0][1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * idet;
    ret[0][2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * idet;
    ret[0][3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * idet;

    ret[1][0] = t12 * idet;
    ret[1][1] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * idet;
    ret[1][2] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * idet;
    ret[1][3] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * idet;

    ret[2][0] = t13 * idet;
    ret[2][1] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * idet;
    ret[2][2] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * idet;
    ret[2][3] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * idet;

    ret[3][0] = t14 * idet;
    ret[3][1] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * idet;
    ret[3][2] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * idet;
    ret[3][3] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * idet;

    return ret;
}


Hit raySphere(Ray ray, shapeInfo circle){
    Hit hit;
    hit.hit = false;
    float3 rayOrigin = ray.origin - circle.position;
    rayOrigin = mul(scale(1/circle.scale), rayOrigin);
    float3 rayDirection = mul(scale(1/circle.scale), ray.direction);
    float3 os = -rayOrigin;
    float op = dot(os,normalize(rayDirection));
    if (op < 1){
        return hit;
    }
    float cp2 = dot(os,os) - op * op;
    if (cp2 > 1){
        return hit;
    }
    float dt = sqrt(1 - cp2);
    float d = op - dt;
    if (d < 1){
        return hit;
    }
    // hit.pos = (ray.origin + ray.direction * d);
    hit.dist = d;
    hit.pos = rayOrigin + normalize(rayDirection) * hit.dist + circle.position;
    RayTracingMaterial material = materials[circle.material];
    hit.material = material;
    // hit.col = circle.color;
    // hit.roughness = circle.emission;
    // hit.emission = circle.roughness;
    hit.hit = true;
    hit.normal = normalize(hit.pos - circle.position);
    // hit.col = hit.normal;
    return hit;
}

Hit rayBox(Ray ray, shapeInfo box){
    Hit hit;
    hit.hit = false;

    // rayOrigin *= float3(0.5f,0.5f,0.5f);
    float3 rayOrigin = ray.origin - box.position;
    rayOrigin = mul(scale(1/box.scale), rayOrigin);
    float3 rayDirection = mul(scale(1/box.scale), ray.direction);

	float t1 = -1000000000000.0;
    float t2 = 1000000000000.0;

	float3 boxMin = float3(0,0,0) - float3(1,1,1) / 2.0;
	float3 boxMax = float3(0,0,0) + float3(1,1,1) / 2.0;

    float3 t0s = (boxMin - rayOrigin) / rayDirection;
    float3 t1s = (boxMax - rayOrigin) / rayDirection;

    float3 tsmaller = min(t0s, t1s);
    float3 tbigger = max(t0s, t1s);

    t1 = max(t1, max(tsmaller.x, max(tsmaller.y, tsmaller.z)));
    t2 = min(t2, min(tbigger.x, min(tbigger.y, tbigger.z)));


    if(t1 <= 0 || t1 >= t2){
        return hit;
    }

	hit.dist = t1;
    // hit.pos = rayOrigin + normalize(rayDirection) * t1 + box.position;
    hit.pos = (ray.origin + ray.direction * hit.dist);
    RayTracingMaterial material = materials[box.material];
    hit.material = material;
    // hit.col = box.color;
    // hit.roughness = box.emission;
    // hit.emission = box.roughness;
    hit.hit = true;
    float3 pc = hit.pos - box.position;
    float3 normal = sign(pc) * ((abs(2 * abs(pc) - box.scale)) < 0.00001f);
    hit.normal = normal;
    // hit.col = pc;
    return hit;
    // normal.x = sign(pc.x) * step(abs(2 * abs(pc.x) - box.scale.x), EPSILON);
    // normal.y = sign(pc.y) * step(abs(2 * abs(pc.y) - box.scale.y), EPSILON);
    // normal.z = sign(pc.z) * step(abs(2 * abs(pc.z) - box.scale.z), EPSILON);
    // normal.x = sign(pc.x) * ((abs(2 * abs(pc.x) - box.scale.x)) < 0.00001f);
    // normal.y = sign(pc.y) * ((abs(2 * abs(pc.y) - box.scale.y)) < 0.00001f);
    // normal.z = sign(pc.z) * ((abs(2 * abs(pc.z) - box.scale.z)) < 0.00001f);
    // normal += float3(sign(pc.x), 0.0, 0.0) * step(abs(abs(pc.x) - box.scale.x), EPSILON);
	// normal += float3(0.0, sign(pc.y), 0.0) * step(abs(abs(pc.y) - box.scale.y), EPSILON);
	// normal += float3(0.0, 0.0, sign(pc.z)) * step(abs(abs(pc.z) - box.scale.z), EPSILON);
}

// WARNING: horrific code incoming

Hit rayCast(Ray ray){
    Ray sampleRay = ray;
    Hit nearestHit;
    nearestHit.dist = 1e30;
    nearestHit.hit = false;
    int i = 0;
    int j = 0;
    while(i < numShapes){
        shapeInfo shape = shapes[i];
        if(shape.shapeType == 0){
            Hit hit = rayBox(sampleRay,shape);
            if(hit.hit && hit.dist < nearestHit.dist){
                nearestHit = hit;
            }
        }else{
            Hit hit = raySphere(sampleRay,shape);
            if(hit.hit && hit.dist < nearestHit.dist){
                nearestHit = hit;
            }
        }
        i++;
    }

    return nearestHit;
}

float rand(float2 data){
    return frac(sin(dot(data, float2(12.9898, 78.233))) * 43758.5453);
}

uint NextRandom(inout uint state)
{
    state = state * 747796405 + 2891336453;
    uint result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
    result = (result >> 22) ^ result;
    return result;
}

float Randnum(inout uint state)
{
    return NextRandom(state) / 4294967295.0; // 2^32 - 1
}

float3 getRandomDir(float3 normal, inout uint rngstate){
    // # Generate a random theta angle (in radians) between 0 and 2*pi
    float theta =( Randnum(rngstate)* 2 * 3.1415926535);

    // # Generate a random phi angle (in radians) between 0 and pi
    float phi = acos(Randnum(rngstate) * 2 -1);

    // # Convert spherical coordinates to Cartesian coordinates
    // # Assuming the unit sphere, where radius = 1
    float x = sin(phi) * cos(theta);
    float y = sin(phi) * sin(theta);
    float z = cos(phi);

    // # The 3D direction as a vector
    float3 dir = float3(x, y, z);

    // If not in normal hemisphere, flip
    dir = sign(dot(dir,normal)) * dir;
    return dir;
}

float getSolar(Hit samplePoint){
    float seed = globalTime;
    float3 origin = samplePoint.pos + samplePoint.normal * 0.0000001f;
    float3 dir = lightPos - origin;
    float lightDistance = dot(dir,dir);
    float shadowRays = float(shadowResolution*lightRadius*lightRadius/(lightDistance)+1); // There must be a better way to find the right amount of shadow rays
    float shadowRayHits = 0;
    for (float i = 0; i<shadowRays; i++) {
        float3 lightSurfacePoint = lightPos + normalize(float3(rand(float2(i+seed, 1)+samplePoint.pos.xy), rand(float2(i+seed, 2)+samplePoint.pos.yz), rand(float2(i+seed, 3)+samplePoint.pos.xz))) * lightRadius;
        float3 lightDir = normalize(lightSurfacePoint - samplePoint.pos);
        Ray shadowRay;
        shadowRay.origin = origin;
        shadowRay.direction = lightDir;
        Hit hitSun = rayCast(shadowRay);
        if (hitSun.hit) {
            if (dot(hitSun.pos-origin,hitSun.pos-origin) < dot(lightSurfacePoint-origin,lightSurfacePoint-origin)) {
                shadowRayHits += 1;
            }
        }

    }
    float fraction = ((float)shadowRayHits/(float)shadowRays);
    return 1 - 0.4f * fraction;
    // return 1 - 0.8f * fraction;
    // Ray shadowRay;
    // shadowRay.origin = origin;
    // shadowRay.direction = normalize(dir);
    // Hit sun = rayCast(shadowRay);
    // if(sun.hit){
    //     return 0.2f;
    // }else{
    //     return 1;
    // }
}

float3 getHDREnvironment(Ray ray){
    float PI =  3.1415926535;
    float3 dir = mul(rotX(-.5 * PI), ray.direction);
    // # Normalize the ray direction
    // normalized_direction = normalize(ray_direction)

    // # Get spherical coordinates
    float theta = atan2(dir.y, dir.x);
    float phi = acos(dir.z);

    // # Ensure theta is positive
    if (theta < 0){
        theta = theta + 2 * PI;
    }

    // # Map to texture coordinates
    float u = (theta / (2 * PI)) * HDRIWidth;
    float v = (phi / PI) * HDRIHeight;

    float2 uv = float2(u,v);


    // # Return the pixel coordinates (u, v)
    return skyboxStrength * pow(abs(skyboxTexture[uv].rgb),skyboxGamma);
}

float3 trace(Ray ray, inout uint rngstate){
    Ray light = ray;
    light.strength = 1;
    light.color = float3(1,1,1);

    float3 illumination;

    for(int bounceCount = 0; bounceCount < maxRecursionDepth; bounceCount++){
        Hit nearestHit = rayCast(light);
        if (nearestHit.hit){

            RayTracingMaterial material = nearestHit.material ;
            float3 newDir;
            float3 diffuse = normalize(nearestHit.normal + getRandomDir(nearestHit.normal,rngstate));
            float3 specular = reflect(light.direction,nearestHit.normal);
            float3 candidate = lerp(specular,diffuse,material.roughness);
            newDir = candidate;

            float chance = Randnum(rngstate);

            // specular chance determined by 'specular', later by fresnel
            // diffuse chance determinde by 'specular' and 'metallic', later dielectric
            // assume randomly polarised light

            float3 newPos = nearestHit.pos;


            light.dist += nearestHit.dist;

            float3 emittedLight = material.colour * material.emissionStrength;
            float attenuation = 1.0f/(light.dist * light.dist);
            illumination += emittedLight * light.color * light.strength  * attenuation;

            float lambert = saturate(dot(nearestHit.normal,newDir));
            float absorbtion = 1.0f;
            float diffuseFraction = 1.0f;
            // absorbtion by fresnel, if specular, multiply with ratio
            light.strength *= absorbtion * lambert * diffuseFraction;
            // light.strength = light.strength * 0.5f;

            light.color *= material.colour;
            light.direction = newDir;
            light.origin = newPos;
        }else{
            // illumination += float3(1,1,1) * light.color * light.strength;
            float3 envCol = getHDREnvironment(light);
            illumination += saturate(envCol) * light.color * light.strength;
            break;
        }
    }

    return illumination;
}


float4 sample(Ray ray){
    Hit nearestHit = rayCast(ray);
    if (nearestHit.hit){
        float3 albedo = nearestHit.material.colour;
        float lambert =  saturate(dot(nearestHit.normal,normalize(lightPos - nearestHit.pos)));
        float shadow = getSolar(nearestHit);
        return saturate(float4(lightCol * albedo * shadow * lambert,1));
    }else{
        return float4(0,0,0,0);
    }

}



[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float2 uv;
    // uv.x = id.x/float(cameraWidth) * 2 - 1;
    // uv.y = id.y/float(cameraHeight) * 2 - 1;
    uv.xy = (id.xy + float2(0.5f,0.5f)) / float2(cameraWidth,cameraHeight) * 2 - 1;
    Destination[uint2(id.xy)] = Source[uint2(id.xy)];

    uint pixelIndex = id.y * cameraWidth + id.x;
    uint rngState = pixelIndex + globalTime * 719393;

    float3 direction = mul(_CameraInverseProjection, float4(uv,0,1)).xyz;
    direction = mul(_CameraToWorld, float4(direction,0)).xyz;
    direction = normalize(direction);
    Ray sampleRay;
    sampleRay.origin = camPos;
    sampleRay.direction = direction;

    float3 totalColour;

    for(int sampleCount = 0; sampleCount < spp; sampleCount++){

        totalColour += trace(sampleRay,rngState);
    }

    // float4 col = float4(1,0,0,1);

    totalColour = totalColour/spp;

    Destination[uint2(id.xy)] = float4(totalColour,0);
    // if(col.a == 1){
    //     Destination[uint2(id.xy)] = col;
    // }
    // Destination[uint2(id.xy)] = float4(nearestHit.normal,1);
    // Destination[uint2(id.xy)] = float4(uv.x,uv.y,0,0);
    // Destination[uint2(id.xy)] = float4(direction,0);
}